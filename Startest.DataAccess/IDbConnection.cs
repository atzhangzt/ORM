using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Threading.Tasks;
using ServiceStack.OrmLite;

namespace Startest.DataAccess
{
    public interface IConnection
    {
        System.Data.IDbConnection Connection { get; }
        string ConnectionString { get; set; }
        int ConnectionTimeout { get; }
        string Database { get; }
        ConnectionState State { get; }

        void AddColumn(Type modelType, FieldDefinition fieldDef);
        void AddColumn<T>(Expression<Func<T, object>> field);
        void AddForeignKey<T, TForeign>(Expression<Func<T, object>> field, Expression<Func<TForeign, object>> foreignField, OnFkOption onUpdate, OnFkOption onDelete, string foreignKeyName = null);
        void AlterColumn(Type modelType, FieldDefinition fieldDef);
        void AlterColumn<T>(Expression<Func<T, object>> field);
        void AlterTable(Type modelType, string command);
        void AlterTable<T>(string command);
        void ChangeColumnName(Type modelType, FieldDefinition fieldDef, string oldColumnName);
        void ChangeColumnName<T>(Expression<Func<T, object>> field, string oldColumnName);
        void Close();
        List<T> Column<T>(ISqlExpression query);
        List<T> Column<T>(string sql, object anonType = null);
        List<T> Column<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        HashSet<T> ColumnDistinct<T>(ISqlExpression query);
        HashSet<T> ColumnDistinct<T>(string sql, object anonType = null);
        HashSet<T> ColumnDistinct<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        HashSet<T> ColumnDistinctFmt<T>(string sqlFormat, params object[] sqlParams);
        List<T> ColumnFmt<T>(string sqlFormat, params object[] sqlParams);
        IEnumerable<T> ColumnLazy<T>(ISqlExpression query);
        IEnumerable<T> ColumnLazy<T>(string sql, object anonType = null);
        IEnumerable<T> ColumnLazy<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        long Count<T>();
        long Count<T>(Expression<Func<T, bool>> expression);
        long Count<T>(Func<SqlExpression<T>, SqlExpression<T>> expression);
        long Count<T>(SqlExpression<T> expression);
        void CreateIndex<T>(Expression<Func<T, object>> field, string indexName = null, bool unique = false);
        void CreateTable(bool overwrite, Type modelType);
        void CreateTable<T>(bool overwrite = false);
        void CreateTableIfNotExists(params Type[] tableTypes);
        bool CreateTableIfNotExists(Type modelType);
        bool CreateTableIfNotExists<T>();
        void CreateTables(bool overwrite, params Type[] tableTypes);
        int Delete<T>(Expression<Func<T, bool>> where);
        int Delete<T>(Func<SqlExpression<T>, SqlExpression<T>> where);
        int Delete<T>(object anonFilter);
        int Delete<T>(params T[] allFieldsFilters);
        int Delete<T>(SqlExpression<T> where);
        int Delete<T>(T allFieldsFilter);
        int DeleteAll(Type tableType);
        int DeleteAll<T>();
        int DeleteAll<T>(IEnumerable<T> rows);
        int DeleteById<T>(object id);
        void DeleteById<T>(object id, ulong rowVersion);
        int DeleteByIds<T>(IEnumerable idValues);
        int DeleteFmt(string table = null, string where = null);
        int DeleteFmt(Type tableType, string sqlFilter, params object[] filterParams);
        int DeleteFmt<T>(string where = null);
        int DeleteFmt<T>(string sqlFilter, params object[] filterParams);
        int DeleteNonDefaults<T>(params T[] nonDefaultsFilters);
        int DeleteNonDefaults<T>(T nonDefaultsFilter);
        Dictionary<K, V> Dictionary<K, V>(ISqlExpression query);
        Dictionary<K, V> Dictionary<K, V>(string sql, object anonType = null);
        Dictionary<K, V> DictionaryFmt<K, V>(string sqlFormat, params object[] sqlParams);
        void Dispose();
        void DropAndCreateTable(Type modelType);
        void DropAndCreateTable<T>();
        void DropAndCreateTables(params Type[] tableTypes);
        void DropColumn(Type modelType, string columnName);
        void DropColumn<T>(string columnName);
        void DropForeignKey<T>(string foreignKeyName);
        void DropIndex<T>(string indexName);
        void DropTable(Type modelType);
        void DropTable<T>();
        void DropTables(params Type[] tableTypes);
        void Exec(Action<IDbCommand> filter);
        IDbCommand Exec(Func<IDbCommand, IDbCommand> filter);
        Task<IDbCommand> Exec(Func<IDbCommand, Task<IDbCommand>> filter);
        Task Exec(Func<IDbCommand, Task> filter);
        T Exec<T>(Func<IDbCommand, T> filter);
        Task<T> Exec<T>(Func<IDbCommand, Task<T>> filter);
        IEnumerable<T> ExecLazy<T>(Func<IDbCommand, IEnumerable<T>> filter);
        int ExecuteNonQuery(string sql);
        int ExecuteNonQuery(string sql, Dictionary<string, object> dict);
        int ExecuteNonQuery(string sql, object anonType);
        void ExecuteProcedure<T>(T obj);
        int ExecuteSql(string sql);
        int ExecuteSql(string sql, object dbParams);
        bool Exists<T>(Expression<Func<T, bool>> expression);
        bool Exists<T>(Func<SqlExpression<T>, SqlExpression<T>> expression);
        bool Exists<T>(object anonType);
        bool Exists<T>(SqlExpression<T> expression);
        bool Exists<T>(string sql, object anonType = null);
        bool ExistsFmt<T>(string sqlFormat, params object[] filterParams);
        SqlExpression<T> From<T, JoinWith>(Expression<Func<T, JoinWith, bool>> joinExpr = null);
        SqlExpression<T> From<T>();
        SqlExpression<T> From<T>(string fromExpression);
        string GetLastSql();
        void Insert<T>(params T[] objs);
        long Insert<T>(T obj, bool selectIdentity = false);
        void InsertAll<T>(IEnumerable<T> objs);
        void InsertOnly<T>(T obj, Func<SqlExpression<T>, SqlExpression<T>> onlyFields);
        void InsertOnly<T>(T obj, SqlExpression<T> onlyFields);
        void InsertOrUpdate<T>(T obj);
        long InsertOrUpdateAll<T>(IEnumerable<T> lstObj);
        long LastInsertId();
        void LoadReferences<T>(T instance);
        List<Into> LoadSelect<Into, From>(SqlExpression<From> expression, string[] include = null);
        List<Into> LoadSelect<Into, From>(SqlExpression<From> expression, Func<Into, object> include);
        List<T> LoadSelect<T>(SqlExpression<T> expression = null, string[] include = null);
        List<T> LoadSelect<T>(Expression<Func<T, bool>> predicate, string[] include = null);
        List<T> LoadSelect<T>(Expression<Func<T, bool>> predicate, Func<T, object> include);
        List<T> LoadSelect<T>(Func<SqlExpression<T>, SqlExpression<T>> expression, string[] include = null);
        List<T> LoadSelect<T>(Func<SqlExpression<T>, SqlExpression<T>> expression, Func<T, object> include);
        List<T> LoadSelect<T>(SqlExpression<T> expression, Func<T, object> include);
        T LoadSingleById<T>(object idValue, string[] include = null);
        T LoadSingleById<T>(object idValue, Func<T, object> include);
        long LongScalar();
        Dictionary<K, List<V>> Lookup<K, V>(ISqlExpression sqlExpression);
        Dictionary<K, List<V>> Lookup<K, V>(string sql, object anonType = null);
        Dictionary<K, List<V>> Lookup<K, V>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        Dictionary<K, List<V>> LookupFmt<K, V>(string sqlFormat, params object[] sqlParams);
        void Open();
        IDbCommand OpenCommand();
        IDbTransaction OpenTransaction();
        IDbTransaction OpenTransaction(IsolationLevel isolationLevel);
        long RowCount(string sql);
        long RowCount<T>(SqlExpression<T> expression);
        int Save<T>(params T[] objs);
        bool Save<T>(T obj, bool references = false);
        int SaveAll<T>(IEnumerable<T> objs);
        void SaveAllReferences<T>(T instance);
        void SaveReferences<T, TRef>(T instance, IEnumerable<TRef> refs);
        void SaveReferences<T, TRef>(T instance, List<TRef> refs);
        void SaveReferences<T, TRef>(T instance, params TRef[] refs);
        TKey Scalar<T, TKey>(Expression<Func<T, TKey>> field);
        TKey Scalar<T, TKey>(Expression<Func<T, TKey>> field, Expression<Func<T, bool>> predicate);
        T Scalar<T>(ISqlExpression sqlExpression);
        T Scalar<T>(string sql, object anonType = null);
        T Scalar<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        T ScalarFmt<T>(string sqlFormat, params object[] sqlParams);
        DataTable Select(string sql);
        List<Into> Select<Into, From>(Func<SqlExpression<From>, SqlExpression<From>> expression);
        List<Into> Select<Into, From>(SqlExpression<From> expression);
        List<T> Select<T>();
        List<T> Select<T>(Expression<Func<T, bool>> predicate);
        List<T> Select<T>(Func<SqlExpression<T>, SqlExpression<T>> expression);
        List<T> Select<T>(ISqlExpression expression, object anonType = null);
        List<T> Select<T>(SqlExpression<T> expression);
        List<T> Select<T>(string sql);
        List<T> Select<T>(string sql, Dictionary<string, object> dict);
        List<T> Select<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        List<T> Select<T>(string sql, object anonType);
        List<TModel> Select<TModel>(Type fromTableType);
        List<T> SelectByIds<T>(IEnumerable idValues);
        List<T> SelectFmt<T>(string sqlFormat, params object[] filterParams);
        List<TModel> SelectFmt<TModel>(Type fromTableType, string sqlFormat, params object[] filterParams);
        IEnumerable<T> SelectLazy<T>();
        IEnumerable<T> SelectLazy<T>(SqlExpression<T> expression);
        IEnumerable<T> SelectLazy<T>(string sql, object anonType = null);
        IEnumerable<T> SelectLazyFmt<T>(string sqlFormat, params object[] filterParams);
        List<T> SelectNonDefaults<T>(string sql, T filter);
        List<T> SelectNonDefaults<T>(T filter);
        DataTable SelectTable<T>(Expression<Func<T, bool>> predicate);
        DataTable SelectTable<T>(SqlExpression<T> expression);
        DateTime ServerTime();
        T Single<T>(Expression<Func<T, bool>> predicate);
        T Single<T>(Func<SqlExpression<T>, SqlExpression<T>> expression);
        T Single<T>(ISqlExpression expression);
        T Single<T>(object anonType);
        T Single<T>(SqlExpression<T> expression);
        T Single<T>(string sql, object anonType = null);
        T Single<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        T SingleById<T>(object idValue);
        T SingleFmt<T>(string sqlFormat, params object[] filterParams);
        T SingleWhere<T>(string name, object value);
        List<T> SqlColumn<T>(ISqlExpression sqlExpression);
        List<T> SqlColumn<T>(string sql, object anonType = null);
        List<T> SqlColumn<T>(string sql, Dictionary<string, object> dict);
        List<T> SqlColumn<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        SqlExpression<T> SqlExpression<T>();
        List<T> SqlList<T>(ISqlExpression sqlExpression);
        List<T> SqlList<T>(string sql, object anonType = null);
        List<T> SqlList<T>(string sql, Action<IDbCommand> dbCmdFilter);
        List<T> SqlList<T>(string sql, Dictionary<string, object> dict);
        List<T> SqlList<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        IDbCommand SqlProc(string name, object inParams = null, bool excludeDefaults = false);
        List<TOutputModel> SqlProcedure<TOutputModel>(object anonType);
        List<TOutputModel> SqlProcedure<TOutputModel>(object anonType, string sqlFilter, params object[] filterParams) where TOutputModel : new();
        T SqlScalar<T>(ISqlExpression sqlExpression);
        T SqlScalar<T>(string sql, object anonType = null);
        T SqlScalar<T>(string sql, Dictionary<string, object> dict);
        T SqlScalar<T>(string sql, IEnumerable<IDbDataParameter> sqlParams);
        bool TableExists(string tableName, string schema = null);
        bool TableExists<T>();
        int Update<T>(object updateOnly, Expression<Func<T, bool>> where = null);
        int Update<T>(params T[] objs);
        int Update<T>(T obj);
        int Update<T>(T item, Expression<Func<T, bool>> where);
        int UpdateAll<T>(IEnumerable<T> objs);
        int UpdateFmt(string table = null, string set = null, string where = null);
        int UpdateFmt<T>(string set = null, string where = null);
        int UpdateNonDefaults<T>(T item, Expression<Func<T, bool>> obj);
        int UpdateOnly<T, TKey>(T obj, Expression<Func<T, TKey>> onlyFields = null, Expression<Func<T, bool>> where = null);
        int UpdateOnly<T>(T model, Func<SqlExpression<T>, SqlExpression<T>> onlyFields);
        int UpdateOnly<T>(T model, SqlExpression<T> onlyFields);
        List<T> Where<T>(object anonType);
        List<T> Where<T>(string name, object value);
        IEnumerable<T> WhereLazy<T>(object anonType);
    }
}